/* 
  P160.【例5.5】以二维数组作为函数参数，仅可实现固定维数int型的矩阵运算。
  P183.【题5.4】以一维数组和行数，列数作为函数参数，实现int型的矩阵运算通用算法。
  P188.【例6.2】以一维数组作为模板的数据类型，用函数模板实现int型的矩阵运算通用算法。
  本次实验采用链表类的思想，节点为“一维动态数组”的形式，实现矩阵管理，
  是链表数据结构的一个应用实例。

  链表的结点采用Array类定义的动态数组，
- 将数据存储到由指针pArr指向的动态开辟的数组空间
 （空间的大小在判断出字节数len后，动态开辟的长度为len的数组pArr）。
- 将与结点有关的基本操作都作为结点类的成员函数。
- pArr域，目前设定存放len个int型数据，若想写得更通用，还可以自行改用模板定义。
  
  链表采用Matrix类定义，对链表整体的操作则作为链表类的成员函数，包括:
 -	清空链表、查找数据、计算链表长度、打印链表数据、移除指定结点
 -	生成链表等等。 
    
编程要求：
-    1 Array类中声明和定义的成员函数，包括构造，析构，打印数据，以及结点操作等。 
-    2 Matrix类中声明和定义的链表的基本操作成员函数。
-    3 测试：完成各成员函数的测试。
*/


/*
思考题：(请在本注释区域回答)
顺序表元素类型必须一致，而链表元素类型可以不一致。
若需要链表结点的数据指针域指向不同类型数据，思考该如何定义？
答：

*/


#include <iostream>
using namespace std;

class Matrix;   //前向引用声明 

//======== 结点类定义 ========//
class Array
{
    int    len;   //存放的数据个数
    int   *pArr;  //目前设定存放len个int型数据
    Array *link;  //也可自行定义为双链表，丰俭由人
public:
    Array();       
    ~Array();
    //自行添加有参，复制构造函数等
    //自行添加如读取元素，设置元素，打印元素等函数，丰俭由人
    //自行添加结点相关操作函数
    friend class Matrix;
};


//======== 链表类定义 ========//
//常用操作：包括建立链表、搜索遍历、插入、删除、取数据等 
class Matrix
{
private:	  
	  Array *head;      //链表头指针 
public: 
	  Matrix();         //构造函数，生成头结点(空链表)，
	                    //也可定义不带头结点的链表完成矩阵运算的封装  
	  ~Matrix();        //析构函数  
	  //自行添加矩阵运算相关操作函数，丰俭由人
}; 


